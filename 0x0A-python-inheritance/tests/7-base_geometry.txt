Module 7-base_geometry
------------------------

Test cases for integer_validator
__________________________________

Import 7-base_geometry.py:
    #from 7-base_geometry.py import BaseGeometry

    >>> geometry_class = __import__('7-base_geometry').BaseGeometry
    >>> base_g = geometry_class()

Test for area:
    >>> base_g.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

Test for integer_validator presence:
    >>> base_g.integer_validator("Age", 1)

Test case for negative number:
    >>> base_g.integer_validator("Age", 0)
    Traceback (most recent call last):
    ...
    ValueError: Age must be greater than 0

Test case for wrong value:
    >>> base_g.integer_validator("Age", "str")
    Traceback (most recent call last):
    ...
    TypeError: Age must be an integer

Test case for few arguments:
    >>> base_g.integer_validator("Age")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

Test case for tuple argument:
    >>> base_g.integer_validator("Age", (3,))
    Traceback (most recent call last):
    ...
    TypeError: Age must be an integer

Test case for list argument:
    >>> base_g.integer_validator("Age", [3])
    Traceback (most recent call last):
    ...
    TypeError: Age must be an integer

Test case for bool argument:
    >>> base_g.integer_validator("Age", True)

Test case for dictionary argument:
    >>> base_g.integer_validator("Age", {3, 5, 7})
    Traceback (most recent call last):
    ...
    TypeError: Age must be an integer

Test case for None:
    >>> base_g.integer_validator("Age", None)
    Traceback (most recent call last):
    ...
    TypeError: Age must be an integer
